@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="mb-5">
    <div class="d-flex justify-content-start">
        <div class="h3">Hello, @(Model.Name). Welcome</div>
    </div>
    <section id="apexchart">
        <div class="row">
            <div class="col-sm-8 col-md-9 mt-2">
                <div class="row">
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header">
                                <h4 class="card-title">Annual Result Analyses</h4>
                            </div>
                            <div class="card-content">
                                <div class="card-body">
                                    <div id="line-chart"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-12 mt-5">
                        <div class="card">
                            <div class="card-header">
                                <h4 class="card-title">Terminal Result Analyses</h4>
                            </div>
                            <div class="card-content">
                                <div class="card-body">
                                    <div id="column-chart"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-4 col-md-3 mt-2">
                @if(TempData["error"] != null)
                {
                    <div class="alert alert-danger alert-dismissible fade show mb-2" role="alert">
                        <strong><i class="fa fa-exclamation-triangle"></i></strong> @(TempData["error"])
                        <button type="button" class="btn-close btn-sm" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                }
                <div class="card">
                    <div class="card-header">
                        <div class="text-uppercase" style="font-family:'Times New Roman';">Print Terminal Result</div>
                    </div>
                   <div class="card-body">
                        <form method="post" asp-page-handler="TermResult">
                            <div class="form-row">
                                <div class="d-flex justify-content-start mb-2">
                                    <label>Select Term</label>
                                </div>
                                <select name="term" class="custom-select form-control" required>
                                    <option disabled selected>***Select Term***</option>
                                    <option value="@(SD.First)">Frist</option>
                                    <option value="@(SD.Second)">Second</option>
                                    <option value="@(SD.Third)">Third</option>
                                </select>
                            </div>
                            <div class="form-row mt-3">
                                <div class="d-flex justify-content-start mb-2">
                                    <label>Select Session</label>
                                </div>
                                <select class="custom-select form-control" name="session" asp-items="Model._Session" required>
                                    <option disabled selected>***Select Session***</option>
                                </select>
                            </div>
                            <div class="mt-3 d-flex justify-content-start mb-3">
                                <button class="btn btn-info form-control" type="submit" formtarget="_blank">Print</button>
                            </div>
                        </form>
                   </div>
                </div>

                <div class="card mt-3">
                    <div class="card-header">
                        <div class="text-uppercase" style="font-family:'Times New Roman';">Print Annual Result</div>
                    </div>
                    <div class="card-body">
                        <form method="post" asp-page-handler="AnnualResult">
                            <div class="form-row">
                                <div class="d-flex justify-content-start mb-2">
                                    <label>Select Session</label>
                                </div>
                                <select class="custom-select form-control" name="session" asp-items="Model._Session" required>
                                    <option disabled selected>***Select Session***</option>
                                </select>
                            </div>
                            <div class="mt-3 d-flex justify-content-start">
                                <button class="btn btn-success form-control" type="submit" formtarget="_blank">Print</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>

@section Scripts{
    <script src="~/app-assets/vendors/js/charts/apexcharts.min.js"></script>

    <script src="~/app-assets/js/core/app-menu.js"></script>
    <script src="~/app-assets/js/core/app.js"></script>
    <script src="~/app-assets/js/scripts/components.js"></script>
   @*  <script src="~/app-assets/js/scripts/charts/chart-apex.js"></script> *@
   <script>
       $(document).ready(function () {
            var $primary = '#7367F0',
                $success = '#28C76F',
                $danger = '#EA5455',
                $warning = '#FF9F43',
                $info = '#00cfe8',
                $label_color_light = '#dae1e7';

            var themeColors = [$primary, $success, $danger, $warning, $info];

            // RTL Support
            var yaxis_opposite = false;
            if ($('html').data('textdirection') == 'rtl') {
                yaxis_opposite = true;
            }
            var lineChartOptions = {
                chart: {
                    height: 350,
                    type: 'line',
                    zoom: {
                        enabled: false
                    }
                },
                colors: themeColors,
                dataLabels: {
                    enabled: false
                },
                stroke: {
                    curve: 'straight'
                },
                series: [{
                    name: "Scores",
                    data: [@(Model._Annual(Model.GetValueAtIndex(Model?._theSession, 7), Model._Results)), @(Model._Annual(Model.GetValueAtIndex(Model?._theSession, 6), Model._Results)),
        @(Model._Annual(Model.GetValueAtIndex(Model?._theSession, 5), Model._Results)), @(Model._Annual(Model.GetValueAtIndex(Model?._theSession, 4), Model._Results)), @(Model._Annual(Model.GetValueAtIndex(Model?._theSession, 3), 
        Model._Results)), @(Model._Annual(Model.GetValueAtIndex(Model?._theSession, 2), Model._Results)), @(Model._Annual(Model.GetValueAtIndex(Model?._theSession, 1), Model._Results)), @(Model._Annual(Model.GetValueAtIndex(Model?._theSession, 0), Model._Results))],
                }],
                title: {
                    text: 'Annual Result Comparison',
                    align: 'left'
                },
                grid: {
                    row: {
                        colors: ['#f3f3f3', 'transparent'], // takes an array which will be repeated on columns
                        opacity: 0.5
                    },
                },
                xaxis: {
                    categories: [`@Model.GetValueAtIndex(Model?._theSession, 7)`, `@Model.GetValueAtIndex(Model?._theSession, 6)`, `@Model.GetValueAtIndex(Model?._theSession, 5)`, `@Model.GetValueAtIndex(Model?._theSession, 4)`,
                        `@Model.GetValueAtIndex(Model?._theSession, 3)`, `@Model.GetValueAtIndex(Model?._theSession, 2)`, `@Model.GetValueAtIndex(Model?._theSession, 1)`, `@Model.GetValueAtIndex(Model?._theSession, 0)`],
                },
                yaxis: {
                    tickAmount: 5,
                    opposite: yaxis_opposite
                }
            }
            var lineChart = new ApexCharts(
                document.querySelector("#line-chart"),
                lineChartOptions
            );
            lineChart.render();

            // Column Chart
            // ----------------------------------
            var columnChartOptions = {
                chart: {
                    height: 350,
                    type: 'bar',
                },
                colors: themeColors,
                plotOptions: {
                    bar: {
                        horizontal: false,
                        endingShape: 'rounded',
                        columnWidth: '55%',
                    },
                },
                dataLabels: {
                    enabled: false
                },
                stroke: {
                    show: true,
                    width: 2,
                    colors: ['transparent']
                },
                series: [{
                    name: 'First Term',
                    data: [@(Model._Terminal(Model.GetValueAtIndex(Model?._theSession, 7), SD.Terms[0], Model._Results)), @(Model._Terminal(Model.GetValueAtIndex(Model?._theSession, 6), SD.Terms[0], Model._Results)),
        @(Model._Terminal(Model.GetValueAtIndex(Model?._theSession, 5), SD.Terms[0], Model._Results)), @(Model._Terminal(Model.GetValueAtIndex(Model?._theSession, 4), SD.Terms[0], Model._Results)), @(Model._Terminal(Model.GetValueAtIndex(Model?._theSession, 3),
                SD.Terms[0], Model._Results)), @(Model._Terminal(Model.GetValueAtIndex(Model?._theSession, 2), SD.Terms[0], Model._Results)), @(Model._Terminal(Model.GetValueAtIndex(Model?._theSession, 1), SD.Terms[0], Model._Results)), @(Model._Terminal(Model.GetValueAtIndex(Model?._theSession, 0), SD.Terms[0], Model._Results))]
                }, {
                    name: 'Second Term',
                    data: [@(Model._Terminal(Model.GetValueAtIndex(Model?._theSession, 7), SD.Terms[1], Model._Results)), @(Model._Terminal(Model.GetValueAtIndex(Model?._theSession, 6), SD.Terms[1], Model._Results)),
        @(Model._Terminal(Model.GetValueAtIndex(Model?._theSession, 5), SD.Terms[1], Model._Results)), @(Model._Terminal(Model.GetValueAtIndex(Model?._theSession, 4), SD.Terms[1], Model._Results)), @(Model._Terminal(Model.GetValueAtIndex(Model?._theSession, 3),
                SD.Terms[1], Model._Results)), @(Model._Terminal(Model.GetValueAtIndex(Model?._theSession, 2), SD.Terms[1], Model._Results)), @(Model._Terminal(Model.GetValueAtIndex(Model?._theSession, 1), SD.Terms[1], Model._Results)), @(Model._Terminal(Model.GetValueAtIndex(Model?._theSession, 0), SD.Terms[1], Model._Results))]
                }, {
                    name: 'Third Term',
                    data: [@(Model._Terminal(Model.GetValueAtIndex(Model?._theSession, 7), SD.Terms[2], Model._Results)), @(Model._Terminal(Model.GetValueAtIndex(Model?._theSession, 6), SD.Terms[2], Model._Results)),
        @(Model._Terminal(Model.GetValueAtIndex(Model?._theSession, 5), SD.Terms[2], Model._Results)), @(Model._Terminal(Model.GetValueAtIndex(Model?._theSession, 4), SD.Terms[2], Model._Results)), @(Model._Terminal(Model.GetValueAtIndex(Model?._theSession, 3),
                SD.Terms[2], Model._Results)), @(Model._Terminal(Model.GetValueAtIndex(Model?._theSession, 2), SD.Terms[2], Model._Results)), @(Model._Terminal(Model.GetValueAtIndex(Model?._theSession, 1), SD.Terms[2], Model._Results)), @(Model._Terminal(Model.GetValueAtIndex(Model?._theSession, 0), SD.Terms[2], Model._Results))]
                }],
                legend: {
                    offsetY: -10
                },
                xaxis: {
                    categories: [`@Model.GetValueAtIndex(Model?._theSession, 7)`, `@Model.GetValueAtIndex(Model?._theSession, 6)`, `@Model.GetValueAtIndex(Model?._theSession, 5)`, `@Model.GetValueAtIndex(Model?._theSession, 4)`,
                        `@Model.GetValueAtIndex(Model?._theSession, 3)`, `@Model.GetValueAtIndex(Model?._theSession, 2)`, `@Model.GetValueAtIndex(Model?._theSession, 1)`, `@Model.GetValueAtIndex(Model?._theSession, 0)`],
                },
                yaxis: {
                    title: {
                        text: '(thousands)'
                    },
                    opposite: yaxis_opposite
                },
                fill: {
                    opacity: 1

                },
                tooltip: {
                    y: {
                        formatter: function (val) {
                            return val + " thousands"
                        }
                    }
                }
            }
            var columnChart = new ApexCharts(
                document.querySelector("#column-chart"),
                columnChartOptions
            );
            columnChart.render();
       });
   </script>
}